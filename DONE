part0: Pragma (plugin)
 - style 1: #pragma instrumente foo fonctionne
 - style 2: #pragma instrumente (fct1, fct2) fonctionne
 - gestion d'erreur (voir fichier t-pragma-error.c)
 - autres: modularité des pragmas dans le code du plugin

part1: Génération statique (plugin)
 - definition du fichier de sortie possible avec comme exemple de commande:
$ gcc-4.5 -fplugin=lib/libmyproof.so ../test/t-partie1.c -O1 -fplugin-arg-libmyproof-dump-file-name=anotherfile.static
 - formatage de la sortie respecté et enregistré par defaut dans libmyproof.static

part2: passe GCC (plugin, plugin/measure)
 - respect du formatage du resultat attendu en inclusif et enregistrement dans un fichier myproof.out
 - utilisation de rdtsc
 - autres: modularité des passes GCC dans le code du plugin

part3: Profiler (prof, myproof.py)
 - gestion du temps exclusif
 - script de parametrage prenant en entrée les données du profiler et genere des graphes
 - prend en parametre le fichier statique et determination du nombre de cycles utilisés par le couple d'instruction load-store

part4: Multi-thread
 - risque d'écriture concurentielle sur les données de mesure
 - piste: semaphore, mutex, utilisation du keywork _thread
